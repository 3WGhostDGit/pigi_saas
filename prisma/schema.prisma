// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mysql" // Changed from sqlite to mysql
  url      = env("DATABASE_URL")
}

// --- Core User & Authentication Models (NextAuth compatible) ---

model User {
  id             String    @id @default(cuid()) @db.VarChar(255)
  name           String?   @db.VarChar(255) // Specify VarChar for MySQL compatibility if desired
  email          String?   @unique @db.VarChar(255)
  emailVerified  DateTime? @db.DateTime(0) // Specify DateTime precision if needed
  image          String?   @db.VarChar(255)
  hashedPassword String?   @db.VarChar(255)
  createdAt      DateTime  @default(now()) @db.DateTime(0)
  updatedAt      DateTime  @updatedAt @db.DateTime(0) // @updatedAt works with MySQL

  accounts Account[]
  sessions Session[]

  // PIGI Specific Fields
  departmentId String?     @db.VarChar(255)
  department   Department? @relation(fields: [departmentId], references: [id])
  jobTitle     String?     @db.VarChar(255)
  managerId    String?     @db.VarChar(255)
  manager      User?       @relation("ManagedBy", fields: [managerId], references: [id])
  reports      User[]      @relation("ManagedBy")
  entryDate    DateTime?   @db.DateTime(0)

  roles UserRole[]

  approvedLeaveRequests LeaveRequest[] @relation("ApprovedLeaveRequests")
  LeaveRequest          LeaveRequest[]

  // Added HR Model Relations
  contracts         EmployeeContract[]
  salaryHistory     SalaryHistory[]
  performanceReviews PerformanceReview[] @relation("EmployeeReviews")
  reviewedPerformance PerformanceReview[] @relation("ReviewerReviews")
  benefits          EmployeeBenefit[]
  trainings         EmployeeTraining[]
  emergencyContacts EmergencyContact[]
  documents         EmployeeDocument[]

  // Department update requests
  departmentRequests DepartmentUpdateRequest[] @relation("UserDepartmentRequests")
  processedRequests  DepartmentUpdateRequest[] @relation("ProcessedDepartmentRequests")

  @@map("users")
}

model Account {
  id                String  @id @default(cuid()) @db.VarChar(255)
  userId            String  @db.VarChar(255)
  type              String  @db.VarChar(255)
  provider          String  @db.VarChar(255)
  providerAccountId String  @db.VarChar(255)
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String? @db.VarChar(255)
  scope             String? @db.VarChar(255)
  id_token          String? @db.Text
  session_state     String? @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(255)
  sessionToken String   @unique @db.VarChar(255)
  userId       String   @db.VarChar(255)
  expires      DateTime @db.DateTime(0)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String   @db.VarChar(255)
  token      String   @unique @db.VarChar(255)
  expires    DateTime @db.DateTime(0)

  @@id([identifier, token]) // Use @@id instead of @@unique for composite primary key
  @@map("verification_tokens")
}

// --- RBAC & Organization Models ---

model Role {
  id          String  @id @default(cuid()) @db.VarChar(255)
  name        String  @unique @db.VarChar(255)
  description String? @db.Text

  users       UserRole[]
  permissions RolePermission[]

  @@map("roles")
}

model Permission {
  id          String  @id @default(cuid()) @db.VarChar(255)
  action      String  @db.VarChar(255)
  subject     String  @db.VarChar(255)
  description String? @db.Text

  roles RolePermission[]

  @@unique([action, subject])
  @@map("permissions")
}

model Department {
  id          String       @id @default(cuid()) @db.VarChar(255)
  name        String       @unique @db.VarChar(255)
  description String?      @db.Text
  parentId    String?      @db.VarChar(255)
  parent      Department?  @relation("SubDepartments", fields: [parentId], references: [id])
  children    Department[] @relation("SubDepartments")

  users User[]
  departmentRequests DepartmentUpdateRequest[]

  @@map("departments")
}

enum DepartmentRequestStatus {
  PENDING
  APPROVED
  REJECTED
}

model DepartmentUpdateRequest {
  id                   String                 @id @default(cuid()) @db.VarChar(255)
  userId               String                 @db.VarChar(255)
  requestedDepartmentId String                @db.VarChar(255)
  currentJobTitle      String?                @db.VarChar(255)
  requestedJobTitle    String?                @db.VarChar(255)
  additionalInfo       String?                @db.Text
  status               DepartmentRequestStatus @default(PENDING)
  adminNotes           String?                @db.Text
  createdAt            DateTime               @default(now()) @db.DateTime(0)
  updatedAt            DateTime               @updatedAt @db.DateTime(0)
  processedAt          DateTime?              @db.DateTime(0)
  processedById        String?                @db.VarChar(255)

  user               User       @relation("UserDepartmentRequests", fields: [userId], references: [id], onDelete: Cascade)
  requestedDepartment Department @relation(fields: [requestedDepartmentId], references: [id])
  processedBy        User?      @relation("ProcessedDepartmentRequests", fields: [processedById], references: [id])

  @@index([userId])
  @@index([requestedDepartmentId])
  @@index([status])
  @@index([processedById])
  @@map("department_update_requests")
}

// --- Module RH Models ---

model LeaveType {
  id          String  @id @default(cuid()) @db.VarChar(255)
  name        String  @unique @db.VarChar(100) // e.g., "Congé Payé", "Maladie", "RTT"
  description String? @db.Text

  leaveRequests LeaveRequest[]

  @@map("leave_types")
}

enum LeaveRequestStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

model LeaveRequest {
  id          String             @id @default(cuid()) @db.VarChar(255)
  userId      String             @db.VarChar(255)
  leaveTypeId String             @db.VarChar(255)
  startDate   DateTime           @db.Date // Seulement la date
  endDate     DateTime           @db.Date // Seulement la date
  reason      String?            @db.Text
  status      LeaveRequestStatus @default(PENDING)
  createdAt   DateTime           @default(now()) @db.DateTime(0)
  updatedAt   DateTime           @updatedAt @db.DateTime(0)
  approverId  String?            @db.VarChar(255) // Qui a approuvé/rejeté
  approvedAt  DateTime?          @db.DateTime(0)

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  leaveType LeaveType @relation(fields: [leaveTypeId], references: [id])
  approver  User?     @relation("ApprovedLeaveRequests", fields: [approverId], references: [id])

  @@index([userId])
  @@index([leaveTypeId])
  @@index([status])
  @@index([approverId])
  @@map("leave_requests")
}

// --- Additional HR Models ---

enum ContractType {
  PERMANENT
  FIXED_TERM
  INTERNSHIP
  APPRENTICESHIP
  FREELANCE
}

enum ContractStatus {
  ACTIVE
  ENDED
  PENDING
  TERMINATED
}

model EmployeeContract {
  id           String         @id @default(cuid()) @db.VarChar(255)
  userId       String         @db.VarChar(255)
  contractType ContractType
  status       ContractStatus @default(ACTIVE)
  startDate    DateTime       @db.Date
  endDate      DateTime?      @db.Date // Nullable for permanent contracts
  jobTitle     String         @db.VarChar(255) // Can differ from current User.jobTitle
  salary       Decimal        @db.Decimal(10, 2) // Example precision
  currency     String         @db.VarChar(3) @default("EUR") // ISO 4217
  workingHours Float?         // e.g., 35, 39 hours per week
  trialPeriodEndDate DateTime? @db.Date
  contractUrl  String?        @db.Text // Link to scanned contract (optional)
  createdAt    DateTime       @default(now()) @db.DateTime(0)
  updatedAt    DateTime       @updatedAt @db.DateTime(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@map("employee_contracts")
}

model SalaryHistory {
  id        String   @id @default(cuid()) @db.VarChar(255)
  userId    String   @db.VarChar(255)
  amount    Decimal  @db.Decimal(10, 2)
  currency  String   @db.VarChar(3) @default("EUR")
  effectiveDate DateTime @db.Date
  reason    String?  @db.Text // e.g., Promotion, Annual Review, Adjustment
  createdAt DateTime @default(now()) @db.DateTime(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("salary_history")
}

enum PerformanceRating {
  POOR
  NEEDS_IMPROVEMENT
  MEETS_EXPECTATIONS
  EXCEEDS_EXPECTATIONS
  OUTSTANDING
}

model PerformanceReview {
  id           String            @id @default(cuid()) @db.VarChar(255)
  userId       String            @db.VarChar(255) // The employee being reviewed
  reviewerId   String            @db.VarChar(255) // The user performing the review (e.g., manager)
  reviewDate   DateTime          @db.Date
  periodStartDate DateTime       @db.Date
  periodEndDate DateTime         @db.Date
  rating       PerformanceRating
  strengths    String?           @db.Text
  weaknesses   String?           @db.Text
  goals        String?           @db.Text // Goals for next period
  comments     String?           @db.Text
  createdAt    DateTime          @default(now()) @db.DateTime(0)
  updatedAt    DateTime          @updatedAt @db.DateTime(0)

  employee User @relation("EmployeeReviews", fields: [userId], references: [id], onDelete: Cascade)
  reviewer User @relation("ReviewerReviews", fields: [reviewerId], references: [id], onDelete:Restrict) // Restrict deletion of reviewer if they have reviews

  @@index([userId])
  @@index([reviewerId])
  @@map("performance_reviews")
}

model Benefit {
  id            String  @id @default(cuid()) @db.VarChar(255)
  name          String  @unique @db.VarChar(255) // e.g., Health Insurance, Meal Vouchers, Gym Membership
  description   String? @db.Text
  provider      String? @db.VarChar(255)
  costPerMonth  Decimal? @db.Decimal(8, 2)
  employeeContribution Decimal? @db.Decimal(8, 2)
  companyContribution Decimal? @db.Decimal(8, 2)
  isActive      Boolean @default(true)
  createdAt     DateTime @default(now()) @db.DateTime(0)
  updatedAt     DateTime @updatedAt @db.DateTime(0)

  employeeBenefits EmployeeBenefit[]

  @@map("benefits")
}

model EmployeeBenefit {
  id        String   @id @default(cuid()) @db.VarChar(255)
  userId    String   @db.VarChar(255)
  benefitId String   @db.VarChar(255)
  startDate DateTime @db.Date
  endDate   DateTime? @db.Date // When the benefit enrollment ends
  notes     String?  @db.Text
  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @updatedAt @db.DateTime(0)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  benefit Benefit @relation(fields: [benefitId], references: [id], onDelete: Restrict) // Don't delete benefit if employees are enrolled

  @@unique([userId, benefitId]) // An employee can have a specific benefit only once at a time (unless endDate is set)
  @@index([userId])
  @@index([benefitId])
  @@map("employee_benefits")
}

model Training {
  id          String   @id @default(cuid()) @db.VarChar(255)
  name        String   @db.VarChar(255)
  description String?  @db.Text
  provider    String?  @db.VarChar(255)
  duration    Int?     // Duration in hours or days (define unit in description)
  cost        Decimal? @db.Decimal(8, 2)
  startDate   DateTime? @db.DateTime(0)
  endDate     DateTime? @db.DateTime(0)
  isMandatory Boolean  @default(false)
  createdAt   DateTime @default(now()) @db.DateTime(0)
  updatedAt   DateTime @updatedAt @db.DateTime(0)

  employeeTrainings EmployeeTraining[]

  @@map("trainings")
}

enum TrainingStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  FAILED
}

model EmployeeTraining {
  id         String         @id @default(cuid()) @db.VarChar(255)
  userId     String         @db.VarChar(255)
  trainingId String         @db.VarChar(255)
  status     TrainingStatus @default(PLANNED)
  completionDate DateTime?   @db.Date
  score      Float?         // Optional score or grade
  certificateUrl String?    @db.Text // Link to certificate
  notes      String?        @db.Text
  createdAt  DateTime       @default(now()) @db.DateTime(0)
  updatedAt  DateTime       @updatedAt @db.DateTime(0)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  training Training @relation(fields: [trainingId], references: [id], onDelete: Restrict) // Don't delete training if employees are assigned

  @@unique([userId, trainingId]) // Employee takes a specific training course once unless tracked differently
  @@index([userId])
  @@index([trainingId])
  @@index([status])
  @@map("employee_trainings")
}

model EmergencyContact {
  id           String  @id @default(cuid()) @db.VarChar(255)
  userId       String  @db.VarChar(255)
  name         String  @db.VarChar(255)
  relationship String  @db.VarChar(100) // e.g., Spouse, Parent, Sibling
  phone        String  @db.VarChar(50)
  email        String? @db.VarChar(255)
  address      String? @db.Text
  isPrimary    Boolean @default(false) // Indicate the primary contact
  createdAt    DateTime @default(now()) @db.DateTime(0)
  updatedAt    DateTime @updatedAt @db.DateTime(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("emergency_contacts")
}

enum DocumentType {
  ID_CARD
  PASSPORT
  RESIDENCE_PERMIT
  CONTRACT
  CERTIFICATE
  PAYSLIP
  OTHER
}

model EmployeeDocument {
  id           String       @id @default(cuid()) @db.VarChar(255)
  userId       String       @db.VarChar(255)
  documentType DocumentType
  fileName     String       @db.VarChar(255) // Original filename
  fileUrl      String       @db.Text         // URL to the stored document (e.g., S3)
  description  String?      @db.Text
  issueDate    DateTime?    @db.Date
  expiryDate   DateTime?    @db.Date
  uploadedAt   DateTime     @default(now()) @db.DateTime(0)
  updatedAt    DateTime     @updatedAt @db.DateTime(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([documentType])
  @@map("employee_documents")
}

// --- Join Tables for Many-to-Many Relationships ---

model UserRole {
  userId String @db.VarChar(255)
  roleId String @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
  @@map("user_roles")
}

model RolePermission {
  roleId       String @db.VarChar(255)
  permissionId String @db.VarChar(255)

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@map("role_permissions")
}
